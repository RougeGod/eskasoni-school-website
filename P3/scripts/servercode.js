/* The purpose of this file is to use the Express API to store the score of the player
 * playing the Mi'kmaq language game on the SMU CS/Math server, so that it can 
 * be retrieved and persist across different browsers and refreshes. The score is initialized to 0/0 
 * on server reload, but if the server is turned off mid-game, the score continues operating locally until 
 * the page is refreshed or the server restarts. 
 *
 * Author: Terry Goldsmith 
 * Author: Baxter Madore
 *
*/

// start the Express framework and make it accessible via the reference (global constant)
const express = require("express");

// define the top level Express function
const server = express();

// set the port where the server listens for clients
const port = 3737;

//corrects is the number of times that the user successfully chose the word since the server was started
let corrects = 0;
//attempts
let attempts = 0;

// enable the server to recognize JSON format
server.use(express.json());

// enable incoming "name":"value" pairs to be any type including arrays
server.use(express.urlencoded({ extended: true }));

/*
  The purpose of this function is to execute the instructions
  necessary: to allow a request from any origin to access this site's content;
  allow only GET and POST requests; and to only accept requests that include
  "Content-Type".
  req - request object generated by the HTTP event
  res - request object generated by the HTTP event
  next - predefined function required to be run after your middleware has run
  Author: Terry Goldsmith
*/
const allowCrossDomain = function (req, res, next) {
  // allow any origin
  res.header("Access-Control-Allow-Origin", "*");
  // allow any method
  res.header("Access-Control-Allow-Methods", "GET,POST");
  // accept only headers with Content-Type included
  res.header("Access-Control-Allow-Headers", "Content-Type");
  // since this middleware function does not terminate the request/response cycle
  // the next() function must be called to continue to the succeeding middleware function
  next();
};

// set domain characteristics defined above
server.use(allowCrossDomain);

/*
  Preset the anonymous function to be the function called whenever a POST
  request is received by this server 
*/

/*
  The purpose of this function is to respond to a POST request and 
  post the score to the server. 
  req - request object generated by the HTTP event
  res - response object generated by the HTTP event
  Author: Terry Goldsmith - Function flow
  Author: Baxter Madore - Modified the function to work with score instead of generic hard-coded objects
*/
server.post("/", function (req, res) {
  // define a new JSON object to be returned
  corrects = req.body.corrects;
  attempts = req.body.attempts;
  let obj = { corrects: corrects, attempts: attempts };

  // access the response object via the reference
  // set the associated status to success (res.status(200))
  // place your new JSON object into the response object
  // return the response object terminating the
  //     request/response cycle so next() is not required
  numOfCorrect = req.body.corrects;
  numOfAttempts = req.body.attempts;
  return res.status(200).send(obj);
});

/*
  Preset the anonymous function to be the function called whenever a GET
  request is received by this server to retrieve the stored score object
*/
/*
  The purpose of this function is to respond to a GET request for the score
  req - request object generated by the HTTP event
  res - request object generated by the HTTP event
  Author: Terry Goldsmith - Main function logic
  Author: Baxter Madore - Modifications to make it work with the score object
  
*/
server.get("/", function (req, res) {
  let fullScore = { corrects: corrects, attempts: attempts };

  // access the response object via the reference
  // set the associated status to success
  // place your new JSON object into the response object
  // return the response object terminating the
  //     request/response cycle so next() is not required
  return res.status(200).send(fullScore);
});


/*
  Preset the anonymous function to be the function called when the server
  starts listening on port 3737
*/

/*
  The purpose of this function is to produce a message on the Node.js console,
  indicating the server has begun to listen for clients on a port.
  Author: Terry Goldsmith
*/
server.listen(port, function () {
  console.log("Listening on port " + port);
});
